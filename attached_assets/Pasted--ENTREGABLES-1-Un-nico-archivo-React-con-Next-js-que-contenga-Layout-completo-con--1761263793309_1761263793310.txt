## ENTREGABLES

1. **Un único archivo React con Next.js** que contenga:
   - Layout completo con sidebar y header
   - Todas las páginas mencionadas
   - Componentes reutilizables
   - Lógica de navegación entre páginas
   - Sistema de autenticación funcional
   - Gestión de estado con React hooks
   - Integración completa con window.storage

2. **Características que DEBE incluir:**
   - ✅ 100% funcional (no placeholders)
   - ✅ Datos seed pre-cargados y realistas
   - ✅ Todas las tablas con ordenamiento y filtros operativos
   - ✅ Todos los gráficos renderizados con datos reales
   - ✅ CRUD completo (Create, Read, Update, Delete) en usuarios, suscripciones, tickets
   - ✅ Formularios con validación funcional
   - ✅ Feedback visual (toasts, alerts) en todas las acciones
   - ✅ Responsive design (desktop y tablet)
   - ✅ Loading states y error handling
   - ✅ Persistencia real usando window.storage

3. **Datos de Ejemplo Detallados:**

```typescript
// Ejemplo de estructura de datos que debes generar:

interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  plan: 'free' | 'creator' | 'pro' | 'business' | 'enterprise';
  products: string[]; // ['autocrea', 'edugenius']
  tokensUsed: Record<string, number>; // { autocrea: 15234, edugenius: 2890 }
  tokensLimit: Record<string, number>; // { autocrea: 30000, edugenius: 5000 }
  status: 'active' | 'inactive' | 'suspended';
  createdAt: string;
  lastLogin: string;
  country: string;
  stripeCustomerId: string;
}

interface Subscription {
  id: string;
  userId: string;
  productId: string; // 'autocrea', 'edugenius', etc.
  plan: string;
  price: number;
  status: 'active' | 'cancelled' | 'expired' | 'trial';
  currentPeriodEnd: string;
  cancelAtPeriodEnd: boolean;
  createdAt: string;
}

interface Transaction {
  id: string;
  userId: string;
  productId: string;
  amount: number;
  currency: string;
  method: 'card' | 'paypal' | 'transfer';
  status: 'success' | 'failed' | 'pending';
  createdAt: string;
  stripeInvoiceId?: string;
}

interface Ticket {
  id: string;
  userId: string;
  subject: string;
  productId: string;
  priority: 'high' | 'medium' | 'low';
  status: 'open' | 'in_progress' | 'resolved' | 'closed';
  messages: Array<{
    from: 'user' | 'admin';
    content: string;
    timestamp: string;
  }>;
  assignedTo?: string;
  createdAt: string;
  updatedAt: string;
}

interface Metrics {
  date: string;
  mrr: number;
  users: number;
  activeUsers: number;
  tokensProcessed: number;
  productBreakdown: Record<string, number>;
}

// Genera al menos:
// - 200 usuarios variados
// - 300 suscripciones (mezcla de activas, canceladas, trial)
// - 500 transacciones (últimos 3 meses)
// - 50 tickets en varios estados
// - 12 meses de métricas históricas
```

4. **Funcionalidades Específicas que Implementar:**

**En Usuarios:**
- Búsqueda en tiempo real (por email, nombre, ID)
- Filtro multi-select (por plan, producto, estado)
- Ordenamiento por cualquier columna (click en header)
- Paginación funcional (50 por página)
- Modal de detalles con tabs (Info, Suscripciones, Tokens, Historial)
- Formulario de edición con validación
- Acción "Otorgar Tokens" con input numérico
- Acción "Suspender" con confirmación

**En Suscripciones:**
- Tabla con todos los campos mencionados
- Tabs funcionales (Activas, Canceladas, Vencidas, Trial)
- Acción "Cancelar" con dialog de confirmación
- Acción "Cambiar Plan" con selector dropdown
- Filtro por fecha de renovación (próximos 7, 30, 90 días)

**En Finanzas:**
- Gráfico de ingresos interactivo (hover muestra detalles)
- Tabla de transacciones con filtros
- Cálculo en tiempo real de totales
- Botón "Exportar CSV" funcional (genera y descarga CSV real)
- Métricas de profit margin calculadas dinámicamente

**En Tokens:**
- Gráfico de consumo por día (últimos 30 días)
- Tabla de top 20 usuarios por consumo
- Alertas automáticas para usuarios >90% del límite
- Cálculo de costo por token y costo total

**En Soporte:**
- Sistema de mensajería funcional (agregar respuestas)
- Cambio de estado de ticket
- Asignación a admin (selector)
- Marcador de prioridad
- Contador de tickets abiertos en tiempo real

5. **UX y Polish:**
- Animaciones de entrada (fade in, slide)
- Skeleton loaders mientras "carga" datos
- Empty states informativos y con ilustración
- Toasts de éxito/error con auto-dismiss
- Confirmaciones para acciones destructivas
- Disabled states en botones mientras se procesa
- Hover effects en cards y botones
- Focus states claros en inputs

6. **Código Limpio:**
- Comentarios explicativos en funciones complejas
- Nombres de variables descriptivos
- Separación de lógica en funciones auxiliares
- Uso de TypeScript para tipado fuerte
- Constantes para valores mágicos (colores, límites, etc.)

## EJEMPLO DE IMPLEMENTACIÓN DE UNA PÁGINA

```tsx
// Ejemplo de cómo debe verse la página de Usuarios

'use client';

import { useState, useMemo } from 'react';
import { Search, Filter, Download, UserPlus, MoreVertical } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

export function UsersPage() {
  const [users, setUsers] = useState(loadUsers());
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedPlan, setSelectedPlan] = useState('all');
  const [sortField, setSortField] = useState('createdAt');
  const [sortDirection, setSortDirection] = useState('desc');
  const [selectedUser, setSelectedUser] = useState(null);

  // Filtrado y ordenamiento
  const filteredUsers = useMemo(() => {
    return users
      .filter(user => {
        const matchesSearch = user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            user.name.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesPlan = selectedPlan === 'all' || user.plan === selectedPlan;
        return matchesSearch && matchesPlan;
      })
      .sort((a, b) => {
        const aVal = a[sortField];
        const bVal = b[sortField];
        return sortDirection === 'asc' ? aVal > bVal ? 1 : -1 : aVal < bVal ? 1 : -1;
      });
  }, [users, searchTerm, selectedPlan, sortField, sortDirection]);

  const handleSuspendUser = async (userId) => {
    // Lógica para suspender usuario
    const updated = users.map(u => 
      u.id === userId ? { ...u, status: 'suspended' } : u
    );
    setUsers(updated);
    await saveUsers(updated);
    showToast('Usuario suspendido exitosamente');
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Usuarios</h1>
        <Button>
          <UserPlus className="mr-2" size={16} />
          Agregar Usuario
        </Button>
      </div>

      {/* Filtros */}
      <div className="flex gap-4 mb-6">
        <Input
          placeholder="Buscar por email o nombre..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-sm"
        />
        <Select value={selectedPlan} onValueChange={setSelectedPlan}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filtrar por plan" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Todos los planes</SelectItem>
            <SelectItem value="free">Free</SelectItem>
            <SelectItem value="creator">Creator</SelectItem>
            <SelectItem value="pro">Pro</SelectItem>
            <SelectItem value="business">Business</SelectItem>
            <SelectItem value="enterprise">Enterprise</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Tabla */}
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead onClick={() => handleSort('email')}>Email</TableHead>
            <TableHead onClick={() => handleSort('plan')}>Plan</TableHead>
            <TableHead>Tokens</TableHead>
            <TableHead onClick={() => handleSort('status')}>Estado</TableHead>
            <TableHead onClick={() => handleSort('createdAt')}>Registro</TableHead>
            <TableHead>Acciones</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredUsers.map(user => (
            <TableRow key={user.id}>
              <TableCell>{user.email}</TableCell>
              <TableCell>
                <Badge variant={getPlanVariant(user.plan)}>{user.plan}</Badge>
              </TableCell>
              <TableCell>{formatTokens(user.tokensUsed)} / {formatTokens(user.tokensLimit)}</TableCell>
              <TableCell>
                <StatusBadge status={user.status} />
              </TableCell>
              <TableCell>{formatDate(user.createdAt)}</TableCell>
              <TableCell>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm">
                      <MoreVertical size={16} />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent>
                    <DropdownMenuItem onClick={() => setSelectedUser(user)}>
                      Ver Detalles
                    </DropdownMenuItem>
                    <DropdownMenuItem>Editar</DropdownMenuItem>
                    <DropdownMenuItem onClick={() => handleSuspendUser(user.id)}>
                      Suspender
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {/* Modal de Detalles */}
      <Dialog open={!!selectedUser} onOpenChange={() => setSelectedUser(null)}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Detalles de Usuario</DialogTitle>
          </DialogHeader>
          {selectedUser && <UserDetailsContent user={selectedUser} />}
        </DialogContent>
      </Dialog>
    </div>
  );
}
```

## IMPORTANTE: RESTRICCIONES Y REQUISITOS

### ❌ NO USAR:
- localStorage o sessionStorage (usar window.storage)
- Librerías externas no mencionadas
- Imágenes externas (usar lucide-react icons)
- Llamadas a APIs reales
- Backend real

### ✅ USAR:
- window.storage para persistencia
- Datos simulados pero realistas
- Todas las operaciones funcionales en memoria
- TypeScript para tipado
- shadcn/ui components
- Lucide React icons
- Recharts para gráficos
- TailwindCSS para estilos

## ESTRUCTURA DE DATOS PARA window.storage

```typescript
// Keys principales:
'dashboard:auth' -> { isAuthenticated: boolean, user: AdminUser }
'dashboard:users' -> User[]
'dashboard:subscriptions' -> Subscription[]
'dashboard:transactions' -> Transaction[]
'dashboard:tickets' -> Ticket[]
'dashboard:metrics:monthly' -> Metrics[] (12 meses)
'dashboard:bundles' -> Bundle[]
'dashboard:config' -> DashboardConfig

// Ejemplo de inicialización:
async function initializeStorage() {
  try {
    // Verificar si ya existen datos
    const existingUsers = await window.storage.get('dashboard:users');
    
    if (!existingUsers) {
      // Seed data inicial
      await window.storage.set('dashboard:users', generateMockUsers(200));
      await window.storage.set('dashboard:subscriptions', generateMockSubscriptions(300));
      await window.storage.set('dashboard:transactions', generateMockTransactions(500));
      await window.storage.set('dashboard:tickets', generateMockTickets(50));
      await window.storage.set('dashboard:metrics:monthly', generateMonthlyMetrics(12));
    }
  } catch (error) {
    console.error('Error initializing storage:', error);
    // Fallback a datos en memoria si storage falla
  }
}
```

## FUNCIONALIDADES CRÍTICAS QUE NO DEBEN FALTAR

1. **Sistema de Login Funcional:**
   - Página de login con formulario
   - Validación de credenciales (hardcoded)
   - Redirección automática si no autenticado
   - Botón de logout funcional
   - Persistencia de sesión

2. **Navegación entre Páginas:**
   - Sidebar con links activos (highlight en página actual)
   - Routing funcional (puede ser con estado si es single-page)
   - Breadcrumbs actualizados
   - Back button donde aplique

3. **CRUD Completo en al menos 2 entidades:**
   - Usuarios: Ver, Editar, Suspender, Otorgar tokens
   - Tickets: Ver, Responder, Cambiar estado, Asignar

4. **Gráficos Interactivos:**
   - Al menos 5 gráficos diferentes (Line, Bar, Area, Pie, Composed)
   - Tooltips funcionales
   - Leyendas clickeables (toggle series)
   - Responsive

5. **Tablas Avanzadas:**
   - Ordenamiento por columna (click en header)
   - Búsqueda en tiempo real
   - Filtros múltiples
   - Paginación (con controles prev/next y page numbers)
   - Acciones por fila

6. **Feedback Visual:**
   - Toast notifications (éxito, error, info)
   - Loading spinners en operaciones async
   - Skeleton loaders al cargar páginas
   - Progress bars donde aplique
   - Confirmación antes de acciones destructivas

7. **Métricas en Tiempo Real:**
   - Cards de métricas con valores animados
   - Indicadores de cambio porcentual (↑ verde, ↓ rojo)
   - Actualización al modificar datos

## EJEMPLO DE DATOS SEED REALISTAS

```typescript
const mockUsers = [
  {
    id: 'user_001',
    email: 'juan.perez@gmail.com',
    name: 'Juan Pérez',
    plan: 'pro',
    products: ['autocrea', 'edugenius'],
    tokensUsed: { autocrea: 15234, edugenius: 2890 },
    tokensLimit: { autocrea: 30000, edugenius: 5000 },
    status: 'active',
    createdAt: '2026-03-15T10:30:00Z',
    lastLogin: '2026-10-22T14:23:00Z',
    country: 'Mexico',
    stripeCustomerId: 'cus_abc123'
  },
  {
    id: 'user_002',
    email: 'maria.garcia@uni.edu',
    name: 'María García',
    plan: 'free',
    products: ['edugenius'],
    tokensUsed: { edugenius: 450 },
    tokensLimit: { edugenius: 500 },
    status: 'active',
    createdAt: '2026-09-20T08:15:00Z',
    lastLogin: '2026-10-23T09:45:00Z',
    country: 'Colombia',
    stripeCustomerId: 'cus_def456'
  },
  // ... 198 usuarios más con datos variados
];

const mockSubscriptions = [
  {
    id: 'sub_001',
    userId: 'user_001',
    productId: 'autocrea',
    plan: 'pro',
    price: 79,
    status: 'active',
    currentPeriodEnd: '2026-11-15T23:59:59Z',
    cancelAtPeriodEnd: false,
    createdAt: '2026-03-15T10:35:00Z'
  },
  // ... más suscripciones
];

// Genera transacciones con fechas distribuidas últimos 3 meses
// Genera tickets con estados variados y conversaciones realistas
// Genera métricas con tendencia creciente realista
```

## OUTPUT ESPERADO

Un dashboard profesional, moderno y 100% funcional que:

✅ Se vea como un producto de $10M+ ARR  
✅ Todas las funciones trabajen sin errores  
✅ Los datos persistan entre recargas de página  
✅ Sea intuitivo y fácil de usar  
✅ Tenga performance excelente  
✅ Sea visualmente impresionante (dark theme, gradientes, animaciones)  
✅ Demuestre el potencial del ecosistema JoxAI  

## INICIO DEL CÓDIGO

Comienza con esta estructura:

```tsx
'use client';

import { useState, useEffect, useMemo } from 'react';
import { 
  LayoutDashboard, Users, CreditCard, DollarSign, 
  Coins, Package, HeadphonesIcon, TrendingUp, 
  Boxes, Settings, LogOut, Search, Bell,
  ChevronDown, Menu, X
} from 'lucide-react';

// Importar todos los componentes de shadcn/ui necesarios
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
// ... más imports

export default function JoxAIDashboard() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentPage, setCurrentPage] = useState('overview');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [isLoading, setIsLoading] = useState(true);

  // Inicializar datos
  useEffect(() => {
    initializeDashboard();
  }, []);

  async function initializeDashboard() {
    // Verificar autenticación
    // Cargar datos desde window.storage
    // Si no existen, crear seed data
    setIsLoading(false);
  }

  if (!isAuthenticated) {
    return <LoginPage onLogin={() => setIsAuthenticated(true)} />;
  }

  return (
    <div className="flex h-screen bg-gradient-to-br from-[#0A0E27] via-[#1a1f3a] to-[#0A0E27] text-white">
      {/* Sidebar */}
      <Sidebar 
        currentPage={currentPage}
        onNavigate={setCurrentPage}
        isOpen={sidebarOpen}
        onToggle={() => setSidebarOpen(!sidebarOpen)}
      />

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Header */}
        <Header />

        {/* Content Area */}
        <main className="flex-1 overflow-auto p-6">
          {renderPage(currentPage)}
        </main>
      </div>
    </div>
  );
}

function renderPage(page: string) {
  switch(page) {
    case 'overview': return <OverviewPage />;
    case 'users': return <UsersPage />;
    case 'subscriptions': return <SubscriptionsPage />;
    case 'finances': return <FinancesPage />;
    case 'tokens': return <TokensPage />;
    case 'bundles': return <BundlesPage />;
    case 'support': return <SupportPage />;
    case 'analytics': return <AnalyticsPage />;
    case 'products': return <ProductsPage />;
    case 'settings': return <SettingsPage />;
    default: return <OverviewPage />;
  }
}

// Continuar con implementación de cada componente...
```

---

**AHORA CREA EL DASHBOARD COMPLETO SIGUIENDO TODAS ESTAS ESPECIFICACIONES.**

Recuerda:
- Todo debe ser funcional, no placeholders
- Usa window.storage para persistencia
- Genera datos seed realistas y variados
- Implementa todas las páginas y funcionalidades mencionadas
- Estilo visual consistente con JoxAI (dark, moderno, profesional)
- Código limpio, comentado y bien estructurado
- Performance optimizado
- UX pulido con animaciones y feedback visual

¡Construye el mejor dashboard de gestión de ecosistema de IA que se haya visto!# PROMPT PARA CREAR DASHBOARD COMPLETO DE GESTIÓN DEL ECOSISTEMA JOXAI

## CONTEXTO DEL PROYECTO

Crea un dashboard administrativo interno 100% funcional para gestionar todo el ecosistema JoxAI, una empresa de soluciones de IA que incluye 7 productos: AUTOCREA (generación de código), EDUGENIUS (educación), MEDIX AI (salud), ECOTRACK AI (sostenibilidad), HIREWISE (RRHH), FINWISDOM (finanzas), y MINDFUL AI (bienestar mental).

## REQUERIMIENTOS TÉCNICOS

**Stack Obligatorio:**
- Next.js 14+ con App Router y TypeScript
- React 18+ con Server Components donde sea posible
- TailwindCSS para estilos
- shadcn/ui para componentes (Alert, Card, Button, Dialog, Table, Tabs, etc.)
- Lucide React para iconos
- Recharts para gráficos y visualizaciones
- React Hook Form + Zod para formularios con validación

**Almacenamiento de Datos:**
- Usar `window.storage` API para persistencia de datos (NO localStorage ni sessionStorage)
- Estructura de datos jerárquica con keys descriptivas
- Manejo de errores en todas las operaciones de storage

**Autenticación:**
- Sistema de login simulado (hardcoded: admin@joxai.org / password: Admin2025!)
- Protección de rutas
- Logout funcional

## ESTRUCTURA DEL DASHBOARD

### 1. LAYOUT PRINCIPAL

**Sidebar Izquierdo (Navegación):**
```
[Logo JoxAI]
━━━━━━━━━━━━━━━
📊 Overview
👥 Usuarios
💳 Suscripciones
💰 Finanzas
🎫 Tokens & Uso
📦 Bundles
🎫 Soporte
📈 Analytics
🤖 Productos
⚙️ Configuración
━━━━━━━━━━━━━━━
[Usuario Avatar]
[Cerrar Sesión]
```

**Header Superior:**
- Breadcrumbs de navegación
- Buscador global
- Notificaciones (badge con número)
- Selector de rango de fechas
- Avatar de usuario admin

**Main Content Area:**
- Responsive y con scroll
- Padding apropiado
- Background con gradiente sutil

### 2. PÁGINAS Y FUNCIONALIDADES

#### 📊 OVERVIEW (Página Principal)

**Métricas Cards (Top Row):**
```
┌─────────────┬─────────────┬─────────────┬─────────────┐
│ 💰 MRR      │ 👥 Usuarios │ 💳 Suscr.   │ 📉 Churn    │
│ $487,250    │ 125,340     │ 12,534      │ 4.1%        │
│ +18% ↑     │ +22% ↑     │ +15% ↑     │ -0.3% ↓    │
└─────────────┴─────────────┴─────────────┴─────────────┘
```

**Gráficos:**
- Line Chart: MRR últimos 12 meses (con comparativa año anterior)
- Bar Chart: Ingresos por producto
- Area Chart: Crecimiento de usuarios
- Pie Chart: Distribución de planes

**Actividad Reciente:**
- Lista en tiempo real de últimas acciones:
  - Nueva suscripción
  - Cancelación
  - Ticket de soporte abierto
  - Pago fallido
  - Límite de tokens alcanzado

**Alertas Críticas:**
- Alertas con colores (rojo: crítico, amarillo: advertencia, azul: info)
- Ejemplos:
  - "Alto consumo de tokens detectado en user_789"
  - "15 pagos fallarán mañana (tarjetas vencidas)"
  - "Churn subió 1.2% este mes"

#### 👥 USUARIOS

**Funcionalidades:**
- **Tabla de usuarios** con:
  - Columnas: ID, Email, Nombre, Plan, Tokens (usado/total), Estado, Fecha Registro, Acciones
  - Búsqueda por email/nombre/ID
  - Filtros: Por plan, por estado (activo/inactivo/suspendido), por producto
  - Ordenamiento por cualquier columna
  - Paginación (50 usuarios por página)

- **Acciones por Usuario:**
  - Ver detalles completos (modal o página dedicada)
  - Editar información
  - Suspender/reactivar cuenta
  - Resetear contraseña
  - Otorgar tokens manuales
  - Ver historial de actividad
  - Enviar email

- **Modal de Detalles de Usuario:**
  ```
  ┌────────────────────────────────────────────┐
  │ Usuario: Juan Pérez (juan@email.com)      │
  ├────────────────────────────────────────────┤
  │ Info General:                              │
  │ - ID: user_abc123                          │
  │ - Registro: 15 Marzo 2026                  │
  │ - Último login: Hace 2 horas               │
  │                                            │
  │ Suscripciones Activas:                     │
  │ - AUTOCREA Pro ($79/mes) - Renueva 5 Nov   │
  │ - EDUGENIUS Plus ($9/mes) - Renueva 12 Nov │
  │                                            │
  │ Uso de Tokens (Octubre):                   │
  │ - AUTOCREA: 15,234 / 30,000 (51%)         │
  │ - EDUGENIUS: 2,890 / 5,000 (58%)          │
  │                                            │
  │ Historial de Pagos:                        │
  │ - 22 Oct 2026: $88.00 (Éxito)            │
  │ - 22 Sep 2026: $88.00 (Éxito)            │
  │                                            │
  │ Tickets de Soporte:                        │
  │ - #234: "Error al generar app" - Cerrado  │
  │                                            │
  │ [Editar] [Suspender] [Otorgar Tokens]    │
  └────────────────────────────────────────────┘
  ```

- **Botón "Agregar Usuario Manual"** (para Enterprise)

- **Estadísticas de Usuarios:**
  - Total usuarios
  - Usuarios activos (login últimos 30 días)
  - Tasa de activación (registrados vs que completaron onboarding)
  - Distribución geográfica (mapa o lista)

#### 💳 SUSCRIPCIONES

**Tabs:**
- Activas
- Canceladas
- Vencidas
- Prueba Gratuita

**Tabla de Suscripciones:**
- Columnas: Usuario, Producto, Plan, Precio, Estado, Próxima Renovación, Acciones
- Filtros: Por producto, por plan, por estado
- Búsqueda por usuario

**Métricas de Suscripciones:**
```
┌──────────────────────────────────────────────────┐
│ MRR: $487,250    ARR: $5,847,000                │
│ Suscripciones Activas: 12,534                    │
│ Churn Rate: 4.1%                                 │
│ ARPU (Average Revenue Per User): $38.87          │
│                                                  │
│ Distribución por Plan:                           │
│ ███████████████ Free (5,234 usuarios)            │
│ ████████ Creator/Plus (4,123 - 33%)              │
│ ██████ Pro (2,567 - 20%)                         │
│ ██ Business (543 - 4%)                           │
│ █ Enterprise (67 - 1%)                           │
└──────────────────────────────────────────────────┘
```

**Gráfico: MRR Growth** (últimos 12 meses con proyección)

**Próximas Renovaciones:**
- Tabla de próximas 100 renovaciones en 7 días
- Alertas de tarjetas vencidas o pagos que podrían fallar

**Acciones:**
- Cancelar suscripción manualmente
- Cambiar plan
- Aplicar descuento o extensión
- Ver facturas generadas

#### 💰 FINANZAS

**Tabs:**
- Overview
- Transacciones
- Facturas
- Reportes

**Overview Tab:**
- **Ingresos Totales:** Hoy, Esta Semana, Este Mes, Este Año
- **Gráfico de Ingresos:** Daily revenue últimos 30 días
- **Ingresos por Producto:** Bar chart comparativo
- **Métodos de Pago:** Pie chart (Tarjeta, PayPal, Transferencia, etc.)
- **Ingresos por País:** Top 10 países

**Transacciones Tab:**
- Tabla de todas las transacciones
- Columnas: ID, Usuario, Producto, Monto, Método, Estado, Fecha
- Filtros: Por estado (éxito/fallido/pendiente), por producto, por rango de fechas
- Búsqueda por ID transacción o usuario

**Facturas Tab:**
- Lista de facturas generadas
- Opciones: Descargar PDF, reenviar por email, marcar como pagada manualmente

**Reportes Tab:**
- Botones para generar reportes:
  - "Reporte Mensual de Ingresos" (PDF)
  - "Reporte de Impuestos" (CSV)
  - "Análisis P&L" (Excel)
- Exportar datos a CSV/Excel

**Métricas Financieras:**
```
┌────────────────────────────────────────┐
│ Ingresos Este Mes: $487,250            │
│ Costos Infraestructura: $72,000 (15%) │
│ Profit Margin: $415,250 (85%)         │
│                                        │
│ Runway: 24 meses                       │
│ Burn Rate: -$15,000/mes               │
│ Cash Balance: $850,000                 │
└────────────────────────────────────────┘
```

#### 🎫 TOKENS & USO

**Métricas Globales:**
```
┌───────────────────────────────────────────────┐
│ Total Tokens Procesados (Octubre):            │
│ 45,234,890 tokens                             │
│                                               │
│ Costo de Infraestructura: $2,160             │
│ Costo por Token: $0.0000477                  │
│                                               │
│ Tokens por Producto:                          │
│ ████████████ AUTOCREA: 25M (55%)              │
│ ██████ EDUGENIUS: 12M (27%)                   │
│ ███ MEDIX AI: 6M (13%)                        │
│ █ Otros: 2.2M (5%)                            │
└───────────────────────────────────────────────┘
```

**Gráfico: Consumo de Tokens Diario** (últimos 30 días, por producto)

**Top Usuarios por Consumo:**
- Tabla: Usuario, Producto, Tokens Consumidos, % del Límite, Acciones
- Alertas de usuarios cerca del límite (>90%)

**Detección de Anomalías:**
- Lista de usuarios con patrones inusuales:
  - Consumo 10x mayor al promedio
  - Picos súbitos de uso
  - Sugerencia de contactar para upsell o investigar abuso

**Configuración de Límites:**
- Tabla editable con límites por plan
- Ejemplo: Free = 500 tokens/mes, Creator = 10,000, etc.

#### 📦 BUNDLES

**Bundles Activos:**
- Tabla de usuarios con bundles
- Columnas: Usuario, Productos en Bundle, Precio, Descuento Aplicado, Estado

**Estadísticas:**
```
Total Bundles Activos: 1,234
Revenue de Bundles: $52,340/mes
Descuento Promedio: 23%

Combinaciones Más Populares:
1. AUTOCREA + EDUGENIUS + FINWISDOM (345 usuarios)
2. EDUGENIUS + MEDIX + MINDFUL (234 usuarios)
3. AUTOCREA + HIREWISE + FINWISDOM (189 usuarios)
```

**Análisis de Bundles:**
- Comparativa: Revenue bundles vs productos individuales
- Conversion rate: % de usuarios que upgradean a bundle
- Sugerencias de bundles populares para pre-configurar

**Acciones:**
- Crear bundle promocional temporal
- Modificar descuentos de bundles existentes

#### 🎫 SOPORTE

**Tabs:**
- Tickets Abiertos
- Tickets Cerrados
- Todos

**Tabla de Tickets:**
- Columnas: #ID, Usuario, Asunto, Producto, Prioridad, Estado, Fecha, Asignado A, Acciones
- Filtros: Por prioridad (Alta/Media/Baja), por estado, por producto
- Búsqueda por ID o usuario

**Vista de Ticket (Modal o Página):**
```
┌─────────────────────────────────────────────┐
│ Ticket #567: "Error al generar aplicación" │
├─────────────────────────────────────────────┤
│ Usuario: juan@email.com                     │
│ Producto: AUTOCREA                          │
│ Prioridad: Alta 🔴                          │
│ Estado: Abierto                             │
│ Creado: 22 Oct 2026, 3:45 PM               │
│                                             │
│ Historial de Conversación:                  │
│ ───────────────────────────────────────────│
│ [Juan] Hola, al intentar generar una app   │
│ web con Next.js me da error "timeout"...   │
│                                             │
│ [Admin] Hola Juan, revisamos el error...   │
│                                             │
│ ───────────────────────────────────────────│
│ Responder:                                  │
│ [___________________________________]       │
│ [Adjuntar Archivo] [Cambiar Estado]        │
│ [Enviar]                                    │
└─────────────────────────────────────────────┘
```

**Métricas de Soporte:**
```
Tickets Abiertos: 23
Tiempo Promedio de Respuesta: 2.3 horas
Tiempo Promedio de Resolución: 8.5 horas
Satisfacción (CSAT): 4.6/5.0 ⭐
```

**Crear Nuevo Ticket Manual**

#### 📈 ANALYTICS

**Tabs:**
- Producto (métricas por cada IA)
- Growth (funnels, conversión)
- Retención (cohorts, churn)
- Engagement (uso, features populares)

**Producto Tab:**
- Selector de producto (AUTOCREA, EDUGENIUS, etc.)
- Métricas específicas:
  - **AUTOCREA:** Apps generadas, promedio de tokens/app, success rate
  - **EDUGENIUS:** Sesiones de tutoría, tiempo promedio, mejora reportada
  - **MEDIX:** Consultas, tipos de síntomas más comunes
  - etc.

**Growth Tab:**
- **Funnel de Conversión:**
  ```
  Visitantes Web → Registros → Activación → Primer Pago → Retención
     100%            40%          75%          15%          85%
  ```
- Gráficos de cada etapa
- Identificación de cuellos de botella

**Retención Tab:**
- **Cohort Analysis:** Tabla de retención por mes de registro
- **Churn Analysis:** Razones de cancelación (encuesta post-cancelación)
- **Reactivación:** Usuarios que cancelaron y volvieron

**Engagement Tab:**
- DAU/WAU/MAU (Daily/Weekly/Monthly Active Users)
- Features más usadas
- Tiempo promedio en plataforma
- Stickiness ratio (DAU/MAU)

#### 🤖 PRODUCTOS

**Lista de Productos del Ecosistema:**

Cada producto tiene su card:
```
┌──────────────────────────────────────────┐
│ [Logo] AUTOCREA                          │
├──────────────────────────────────────────┤
│ Estado: 🟢 Activo                        │
│ Usuarios: 45,234                         │
│ MRR: $195,000                            │
│ Tokens/mes: 25M                          │
│                                          │
│ [Ver Detalles] [Configuración]          │
└──────────────────────────────────────────┘
```

**Detalles de Producto:**
- Métricas específicas
- Configuración de planes y precios
- Features habilitadas/deshabilitadas
- Integrations activas
- Changelog / Updates recientes

**Agregar Nuevo Producto** (para futuro)

#### ⚙️ CONFIGURACIÓN

**Tabs:**
- General
- Equipo
- Integraciones
- Seguridad
- Notificaciones

**General Tab:**
- Nombre de la empresa
- Logo (upload)
- Información de contacto
- Timezone
- Moneda por defecto

**Equipo Tab:**
- Lista de miembros del equipo admin
- Roles: Admin, Support, Developer, Viewer
- Invitar nuevo miembro
- Permisos por rol

**Integraciones Tab:**
- Estado de integraciones:
  - ✅ Stripe (Conectado)
  - ✅ Clerk (Conectado)
  - ✅ Convex (Conectado)
  - ⚠️ Slack (No configurado)
  - ⚠️ Zendesk (No configurado)
- Botones para conectar/desconectar

**Seguridad Tab:**
- Logs de actividad de admins
- Configuración de MFA
- IP whitelist
- API keys (generar, revocar)

**Notificaciones Tab:**
- Configurar cuándo recibir alertas por email:
  - Nueva suscripción
  - Pago fallido
  - Ticket de soporte crítico
  - Límite de tokens alcanzado
  - etc.

### 3. CARACTERÍSTICAS TÉCNICAS CRÍTICAS

**Datos de Ejemplo (Seed Data):**
Genera datos realistas y variados:
- 200+ usuarios con diferentes planes y estados
- 500+ transacciones (éxito, fallidas, pendientes)
- 50+ tickets de soporte en diferentes estados
- Métricas históricas (últimos 12 meses de MRR, usuarios, tokens)
- Distribución geográfica (10 países Latam + USA + España)

**Interactividad:**
- Todos los botones deben ser funcionales
- Los formularios deben validar con Zod
- Las tablas deben permitir ordenamiento real
- Los filtros deben funcionar en tiempo real
- Los gráficos deben ser interactivos (hover, tooltips)

**Persistencia con window.storage:**
```typescript
// Estructura de keys sugerida:
users:list -> Array de usuarios
users:{userId} -> Datos de usuario individual
subscriptions:list -> Array de suscripciones
transactions:list -> Array de transacciones
tickets:list -> Array de tickets
metrics:mrr -> Histórico de MRR
metrics:users -> Histórico de usuarios
config:general -> Configuración general
// etc.
```

**Manejo de Errores:**
- Try-catch en todas las operaciones de storage
- Toasts/alerts para feedback al usuario
- Fallbacks cuando no hay datos

**Performance:**
- Lazy loading de componentes pesados
- Paginación en tablas grandes
- Debounce en búsquedas
- Memoización de cálculos costosos

**Responsive Design:**
- Desktop first pero funcional en tablet
- Sidebar colapsable en móvil
- Tablas con scroll horizontal en pantallas pequeñas

### 4. ESTILO VISUAL

**Paleta de Colores JoxAI:**
```css
--primary: #4A90E2 (Azul eléctrico)
--secondary: #9B59B6 (Púrpura)
--accent: #00D9FF (Cian)
--background: #0A0E27 (Negro profundo)
--foreground: #FFFFFF
--muted: #6B7280
--success: #10B981
--warning: #F59E0B
--error: #EF4444
```

**Tema:**
- Dark mode por defecto
- Glassmorphism en cards importantes
- Gradientes sutiles en backgrounds
- Sombras suaves
- Bordes redondeados (rounded-lg)
- Animaciones de transición fluidas

**Tipografía:**
- Font: Inter o sistema sans-serif
- Títulos: font-bold
- Números grandes: text-3xl o text-4xl
- Métricas: tabular-nums

### 5. COMPONENTES REUTILIZABLES

Crea componentes modulares:
- `<MetricCard>` - Card de métrica con título, valor, cambio % y icono
- `<DataTable>` - Tabla genérica con ordenamiento, filtros, paginación
- `<StatChart>` - Wrapper para gráficos de Recharts
- `<UserAvatar>` - Avatar de usuario con fallback a iniciales
- `<StatusBadge>` - Badge de estado (activo/inactivo/etc.) con colores
- `<EmptyState>` - Componente cuando no hay datos
- `<LoadingSpinner>` - Spinner de carga
- `<ConfirmDialog>` - Diálogo de confirmación para acciones destructivas

### 6. FEATURES ADICIONALES

**Búsqueda Global (Cmd+K):**
- Shortcut de teclado
- Búsqueda en usuarios, suscripciones, tickets
- Navegación rápida a páginas

**Notificaciones:**
- Bell icon con badge
- Dropdown con últimas 10 notificaciones
- Link a página de notificaciones completas

**Modo de Prueba:**
- Toggle para activar "Demo Mode" que use datos ficticios
- Útil para mostrar el dashboard sin exponer datos reales

**Exportación de Datos:**
- Botones de exportar en tablas principales
- Formatos: CSV, Excel, JSON

**Dark/Light Mode Toggle** (opcional, pero dark por defecto)

### 7. SEGURIDAD Y BUENAS PRÁCTICAS

- Validación de inputs con Zod
- Sanitización de datos mostrados (prevenir XSS)
- Confirmación antes de acciones destructivas (suspender usuario, cancelar suscripción)
- Logs de acciones de admin (quién hizo qué y cuándo)
- Rate limiting simulado para formularios

## ENTREGABLES

1. **Un único archivo React con Next.js** que contenga:
   - Layout completo con sidebar y header
   - Todas las páginas mencionadas
   - Componentes reutilizables
   - Lógica de naveg